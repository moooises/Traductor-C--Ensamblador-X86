Grammar design
entrada -> f_linea instruction
instruction -> statement END | WHILE LPAREN empty1 empty2 statement RKEY
	 	| IF LPAREN empty3 LKEY statement RKEY elseif 
empty1 -> " " 
empty2 -> logic RPAREN LKEY
empty3 -> logic RPAREN {NodoIf()}
elseif -> " " | empty4 statement RKEY | ELSE LKEY 
empty4 -> ELSE LKEY
f_linea -> TIPO linea END f_linea | ' ' 
linea -> assign | ID rest 
assig -> ID ASSIGN logic rest | ' ' 
rest -> 'COMA linea' | ' ' 
statement -> ID ASSIGN logic | logic | ' ' 
logic -> logic EQUAL logicpr | logic NEQUAL logicpr | logicpr
logicpr -> logicpr GREATER expr | expr
expr -> expr PLUS fact | expr MINUS fact | fact
fact -> fact TIMES basico | fact DIVIDE basico | basico 
basico ->  MINUS basico | ID | NUM | LPAREN expr RPAREN





Problema -> Existe recursividad por la izquierda y por la derecha. Tenemos que 
	conseguir recursividad únicamente por la izquierda. 

instr -> ID '=' expresion | if ( expresion ) instr
 